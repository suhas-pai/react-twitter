/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SignupLazyImport = createFileRoute('/signup')()
const SettingsLazyImport = createFileRoute('/settings')()
const ProfileLazyImport = createFileRoute('/profile')()
const NotificationsLazyImport = createFileRoute('/notifications')()
const MessagesLazyImport = createFileRoute('/messages')()
const LoginLazyImport = createFileRoute('/login')()
const ExploreLazyImport = createFileRoute('/explore')()
const BookmarksLazyImport = createFileRoute('/bookmarks')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SignupLazyRoute = SignupLazyImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const ProfileLazyRoute = ProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const NotificationsLazyRoute = NotificationsLazyImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/notifications.lazy').then((d) => d.Route))

const MessagesLazyRoute = MessagesLazyImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/messages.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ExploreLazyRoute = ExploreLazyImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/explore.lazy').then((d) => d.Route))

const BookmarksLazyRoute = BookmarksLazyImport.update({
  id: '/bookmarks',
  path: '/bookmarks',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/bookmarks.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/bookmarks': {
      id: '/bookmarks'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof BookmarksLazyImport
      parentRoute: typeof rootRoute
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/messages': {
      id: '/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesLazyImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/bookmarks': typeof BookmarksLazyRoute
  '/explore': typeof ExploreLazyRoute
  '/login': typeof LoginLazyRoute
  '/messages': typeof MessagesLazyRoute
  '/notifications': typeof NotificationsLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/bookmarks': typeof BookmarksLazyRoute
  '/explore': typeof ExploreLazyRoute
  '/login': typeof LoginLazyRoute
  '/messages': typeof MessagesLazyRoute
  '/notifications': typeof NotificationsLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/bookmarks': typeof BookmarksLazyRoute
  '/explore': typeof ExploreLazyRoute
  '/login': typeof LoginLazyRoute
  '/messages': typeof MessagesLazyRoute
  '/notifications': typeof NotificationsLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bookmarks'
    | '/explore'
    | '/login'
    | '/messages'
    | '/notifications'
    | '/profile'
    | '/settings'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bookmarks'
    | '/explore'
    | '/login'
    | '/messages'
    | '/notifications'
    | '/profile'
    | '/settings'
    | '/signup'
  id:
    | '__root__'
    | '/'
    | '/bookmarks'
    | '/explore'
    | '/login'
    | '/messages'
    | '/notifications'
    | '/profile'
    | '/settings'
    | '/signup'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  BookmarksLazyRoute: typeof BookmarksLazyRoute
  ExploreLazyRoute: typeof ExploreLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  MessagesLazyRoute: typeof MessagesLazyRoute
  NotificationsLazyRoute: typeof NotificationsLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  SignupLazyRoute: typeof SignupLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BookmarksLazyRoute: BookmarksLazyRoute,
  ExploreLazyRoute: ExploreLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  MessagesLazyRoute: MessagesLazyRoute,
  NotificationsLazyRoute: NotificationsLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  SignupLazyRoute: SignupLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bookmarks",
        "/explore",
        "/login",
        "/messages",
        "/notifications",
        "/profile",
        "/settings",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/bookmarks": {
      "filePath": "bookmarks.lazy.tsx"
    },
    "/explore": {
      "filePath": "explore.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/messages": {
      "filePath": "messages.lazy.tsx"
    },
    "/notifications": {
      "filePath": "notifications.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/signup": {
      "filePath": "signup.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
